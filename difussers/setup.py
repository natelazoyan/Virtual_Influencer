# Copyright 2024 The HuggingFace Team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import re
import sys
from setuptools import Command, find_packages, setup

# All dependencies should be listed here with their version requirements if any
_deps = [
    "Pillow",  # Generic dependency without specific version
    "googletrans==3.1.0a0",  # Specific version needed
    "accelerate",  # Latest stable version
    "gradio==4.29.0",  # Locked to specific version for API stability
    "natsort",  # Latest stable version
    "xformers",  # Latest stable version
    "compel==0.1.8",  # Locked to specific version for compatibility
    "bitsandbytes==0.41.3",  # Specific version for performance reasons
    "datasets",  # Latest stable version
    "ftfy",  # Latest stable version
    "spacy==3.7.4",  # Specific version for feature support
    "transformers",  # Latest stable version
    "filelock",  # Latest stable version
    "flax>=0.4.1",  # Minimum version specified
    "hf-doc-builder>=0.3.0",  # Minimum version for latest features
    "huggingface-hub>=0.20.2",  # Minimum version for compatibility
    "requests-mock==1.10.0",  # Specific version locked
    "importlib_metadata",  # Latest stable version
    "invisible-watermark>=0.2.0",  # Minimum version specified
    "isort>=5.5.4",  # Minimum version for latest features
    "jax==0.4.6",  # Specific version locked
    "jaxlib==0.4.6",  # Specific version locked
    "Jinja2",  # Latest stable version
    "k-diffusion>=0.0.12",  # Minimum version specified
    "torchsde",  # Latest stable version
    "note_seq",  # Latest stable version
    "librosa",  # Latest stable version
    "numpy",  # Latest stable version
    "parameterized",  # Latest stable version
    "peft>=0.6.0",  # Minimum version specified
    "protobuf>=3.20.3,<4",  # Range version specified
    "pytest",  # Latest stable version
    "pytest-timeout",  # Latest stable version
    "pytest-xdist",  # Latest stable version
    "python>=3.8.0",  # Minimum Python version specified
    "ruff==0.1.5",  # Specific version locked
    "safetensors>=0.3.1",  # Minimum version specified
    "sentencepiece>=0.1.91,!=0.1.92",  # Range with exclusion
    "GitPython<3.1.19",  # Upper bound version specified
    "scipy",  # Latest stable version
    "onnx",  # Latest stable version
    "regex!=2019.12.17",  # Specific exclusion
    "torchtext==0.17.1",  # Specific version locked
    "torchaudio==2.2.1+cu121",  # Specific version with CUDA support
    "requests",  # Latest stable version
    "tensorboard",  # Latest stable version
    "torch==2.2.1",  # Specific version locked
    "triton==2.2.0",  # Specific version locked
    "torchvision==0.17.1+cu121",  # Specific version with CUDA support
    "transformers>=4.25.1",  # Minimum version specified
    "urllib3<=2.0.0",  # Upper bound version specified
    "black",  # Latest stable version
    "weasel==0.3.4",  # Specific version locked
    "typer>=0.3.0,<0.10.0",  # Version range specified
]

# Transform list of dependencies into a dictionary for easier access
deps = {dep.split("==")[0]: dep for dep in _deps if "==" in dep}
deps.update({dep.split(">=")[0]: dep for dep in _deps if ">=" in dep})
deps.update({dep.split("<")[0]: dep for dep in _deps if "<" in dep and "!=" not in dep})

def deps_list(*pkgs):
    return [deps[pkg] for pkg in pkgs]

class DepsTableUpdateCommand(Command):
    """ A custom command that updates the dependency table. """
    description = "build runtime dependency table"
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        content = ["# THIS FILE HAS BEEN AUTOGENERATED",
                   "deps = {",
                   "\n".join(f'    "{k}": "{v}",' for k, v in deps.items()),
                   "}",
                   ""]
        with open("src/diffusers/dependency_versions_table.py", "w") as f:
            f.write("\n".join(content))

setup(
    name="diffusers",
    version="0.28.0.dev0",
    description="State-of-the-art diffusion in PyTorch and JAX.",
    long_description=open("README.md", "r", encoding="utf-8").read(),
    long_description_content_type="text/markdown",
    keywords="deep learning diffusion jax pytorch stable diffusion audioldm",
    license="Apache 2.0 License",
    author="The Hugging Face team",
    author_email="patrick@huggingface.co",
    url="https://github.com/huggingface/diffusers",
    package_dir={"": "src"},
    packages=find_packages("src"),
    package_data={"diffusers": ["py.typed"]},
    include_package_data=True,
    python_requires=">=3.8.0",
    install_requires=list(deps.values()),
    extras_require={
        "quality": deps_list("urllib3", "isort", "ruff", "hf-doc-builder"),
        "docs": deps_list("hf-doc-builder"),
        "training": deps_list("accelerate", "datasets", "protobuf", "tensorboard", "Jinja2", "peft"),
        "test": deps_list(
            "compel",
            "GitPython",
            "datasets",
            "Jinja2",
            "invisible-watermark",
            "k-diffusion",
            "librosa",
            "parameterized",
            "pytest",
            "pytest-timeout",
            "pytest-xdist",
            "requests-mock",
            "safetensors",
            "sentencepiece",
            "scipy",
            "torchvision",
            "transformers"
        ),
        "torch": deps_list("torch", "accelerate"),
    },
    extras_require={
        "flax": deps_list("jax", "jaxlib", "flax") if os.name != "nt" else [],
        "dev": deps_list(
            "urllib3", "isort", "ruff", "hf-doc-builder", "accelerate", "datasets", "protobuf",
            "tensorboard", "Jinja2", "peft", "compel", "GitPython", "invisible-watermark", "k-diffusion",
            "librosa", "parameterized", "pytest", "pytest-timeout", "pytest-xdist", "requests-mock",
            "safetensors", "sentencepiece", "scipy", "torchvision", "transformers",
            "torch", "flax"
        ),
    },
    install_requires=[
        deps["Pillow"],
        deps["googletrans"],
        deps["accelerate"],
        deps["gradio"],
        deps["natsort"],
        deps["xformers"],
        deps["compel"],
        deps["bitsandbytes"],
        deps["datasets"],
        deps["ftfy"],
        deps["spacy"],
        deps["transformers"],
        deps["filelock"],
        deps["flax"],
        deps["hf-doc-builder"],
        deps["huggingface-hub"],
        deps["requests-mock"],
        deps["importlib_metadata"],
        deps["invisible-watermark"],
        deps["isort"],
        deps["jax"],
        deps["jaxlib"],
        deps["Jinja2"],
        deps["k-diffusion"],
        deps["torchsde"],
        deps["note_seq"],
        deps["librosa"],
        deps["numpy"],
        deps["parameterized"],
        deps["peft"],
        deps["protobuf"],
        deps["pytest"],
        deps["pytest-timeout"],
        deps["pytest-xdist"],
        deps["python"],
        deps["ruff"],
        deps["safetensors"],
        deps["sentencepiece"],
        deps["GitPython"],
        deps["scipy"],
        deps["onnx"],
        deps["regex"],
        deps["torchtext"],
        deps["torchaudio"],
        deps["requests"],
        deps["tensorboard"],
        deps["torch"],
        deps["triton"],
        deps["torchvision"],
        deps["transformers"],
        deps["urllib3"],
        deps["black"],
        deps["weasel"],
        deps["typer"],
    ],
    entry_points={
        "console_scripts": ["diffusers-cli=diffusers.commands.diffusers_cli:main"]
    },
    classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Intended Audience :: Education",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: Apache Software License",
        "Operating System :: OS Independent",
        "Topic :: Scientific/Engineering :: Artificial Intelligence",
        "Programming Language :: Python :: 3",
    ] + [f"Programming Language :: Python :: 3.{i}" for i in range(8, sys.version_info.minor + 1)],
    cmdclass={
        "deps_table_update": DepsTableUpdateCommand,
    },
)

# Note: The "deps_table_update" command class will allow you to keep the dependency version table updated
# within your package. Run `python setup.py deps_table_update` to regenerate the dependencies file.

